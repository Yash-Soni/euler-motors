{"ast":null,"code":"var _jsxFileName = \"/Users/yashsoni/Documents/web-apps/js codes/Machine-coding-UI/euler-motors/src/components/InputForm/InputForm.jsx\",\n  _s = $RefreshSig$();\nimport { useForm } from 'react-hook-form';\nimport { Box, Button, Modal } from '@mui/material';\nimport { useReducer, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setTitle, addField, addForm } from '../redux/slices/formSlice';\nimport './styles.css';\nimport BasicDetails from './BasicDetails';\nimport Options from './Options';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Actions = {\n  SetDropdowns: 'setDropdowns',\n  SetTextFields: 'setTextFields',\n  SetTextAreas: 'setTextAreas',\n  SetSwitches: 'setSwitches',\n  SetRadios: 'setRadios',\n  RESET: 'reset'\n};\nconst initialState = {\n  dropdownCount: '',\n  textFieldCount: '',\n  textAreaCount: '',\n  switchCount: '',\n  radioCount: ''\n};\nfunction reducer(state, action) {\n  switch (action.type) {\n    case Actions.SetDropdowns:\n      return {\n        ...state,\n        dropdownCount: action.payload\n      };\n    case Actions.SetTextFields:\n      return {\n        ...state,\n        textFieldCount: action.payload\n      };\n    case Actions.SetTextAreas:\n      return {\n        ...state,\n        textAreaCount: action.payload\n      };\n    case Actions.SetSwitches:\n      return {\n        ...state,\n        switchCount: action.payload\n      };\n    case Actions.SetRadios:\n      return {\n        ...state,\n        radioCount: action.payload\n      };\n    case Actions.RESET:\n      return initialState;\n    default:\n      break;\n  }\n}\nconst InputForm = () => {\n  _s();\n  const [openForm, setOpenForm] = useState(false);\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [dropdownDetails, setDropdownDetails] = useState([]);\n  const [textFieldDetails, setTextFieldDetails] = useState([]);\n  const [textAreaDetails, setTextAreaDetails] = useState([]);\n  const [switchDetails, setSwitchDetails] = useState([]);\n  const [radioDetails, setRadioDetails] = useState([]);\n  const globalDispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    reset\n  } = useForm();\n  const onSubmit = data => {\n    if (data && typeof data === 'object') {\n      globalDispatch(setTitle(data.formTitle));\n      const fieldData = [{\n        type: 'dropdown',\n        count: Number(data.dropdowns),\n        data: []\n      }, {\n        type: 'textField',\n        count: Number(data.textFields),\n        data: []\n      }, {\n        type: 'textArea',\n        count: Number(data.textAreas),\n        data: []\n      }, {\n        type: 'switch',\n        count: Number(data.switches),\n        data: []\n      }, {\n        type: 'radio',\n        count: Number(data.radios),\n        data: []\n      }];\n      fieldData.forEach(field => globalDispatch(addField(field)));\n      const formData = {\n        title: data.formTitle,\n        fields: fieldData\n      };\n      globalDispatch(addForm(formData));\n    }\n    setOpenForm(false);\n    reset();\n    dispatch({\n      type: Actions.RESET\n    });\n  };\n  const handleCountInput = (inputType, value) => {\n    switch (inputType) {\n      case 'dropdown':\n        dispatch({\n          type: Actions.SetDropdowns,\n          payload: value\n        });\n        break;\n      case 'textField':\n        dispatch({\n          type: Actions.SetTextFields,\n          payload: value\n        });\n        break;\n      case 'textArea':\n        dispatch({\n          type: Actions.SetTextAreas,\n          payload: value\n        });\n        break;\n      case 'switch':\n        dispatch({\n          type: Actions.SetSwitches,\n          payload: value\n        });\n        break;\n      case 'radio':\n        dispatch({\n          type: Actions.SetRadios,\n          payload: value\n        });\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Input Form:\", /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => setOpenForm(true),\n      children: \"Create Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: openForm,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: \"inputForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputFields\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit(onSubmit),\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Form Title: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              ...register(\"formTitle\"),\n              placeholder: \"Enter Your Form Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Number of Input Fields Required for your Form:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"individualInput\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Dropdowns:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\"\n                // value={state.dropdownCount} onChange={updateDropdownCount} placeholder='0' \n                ,\n                className: \"inputBox\",\n                ...register(\"dropdowns\"),\n                placeholder: \"0\",\n                onChange: e => handleCountInput('dropdown', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this), state.dropdownCount > 0 && Array.from({\n                length: state.dropdownCount\n              }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(BasicDetails, {\n                  dropdownDetails: dropdownDetails,\n                  setDropdownDetails: setDropdownDetails\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"individualInput\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"TextFields:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\"\n                // value={state.textFieldCount} onChange={updateTextFieldCount} placeholder='0' \n                ,\n                className: \"inputBox\",\n                ...register(\"textFields\"),\n                placeholder: \"0\",\n                onChange: e => handleCountInput('textField', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, this), state.textFieldCount > 0 && Array.from({\n                length: state.textFieldCount\n              }).map((_, index) => /*#__PURE__*/_jsxDEV(BasicDetails, {\n                textFieldDetails: textFieldDetails,\n                setTextFieldDetails: setTextFieldDetails\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"individualInput\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"TextAreas:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\"\n                // value={state.textAreaCount} onChange={updateTextAreaCount} placeholder='0' \n                ,\n                className: \"inputBox\",\n                ...register(\"textAreas\"),\n                placeholder: \"0\",\n                onChange: e => handleCountInput('textArea', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 17\n              }, this), state.textAreaCount > 0 && Array.from({\n                length: state.textAreaCount\n              }).map((_, index) => /*#__PURE__*/_jsxDEV(BasicDetails, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"individualInput\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Switches:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\"\n                // value={state.switchCount} onChange={updateSwitchCount} placeholder='0' \n                ,\n                className: \"inputBox\",\n                ...register(\"switches\"),\n                placeholder: \"0\",\n                onChange: e => handleCountInput('switch', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 17\n              }, this), state.switchCount > 0 && Array.from({\n                length: state.switchCount\n              }).map((_, index) => /*#__PURE__*/_jsxDEV(BasicDetails, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"individualInput\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Radio Buttons:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\"\n                // value={state.radioCount} onChange={updateRadioCount} placeholder='0' \n                ,\n                className: \"inputBox\",\n                ...register(\"radios\"),\n                placeholder: \"0\",\n                onChange: e => handleCountInput('radio', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 17\n              }, this), state.radioCount > 0 && Array.from({\n                length: state.radioCount\n              }).map((_, index) => /*#__PURE__*/_jsxDEV(BasicDetails, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"submit\",\n              className: \"submitButton\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setOpenForm(false),\n          className: \"closeButton\",\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(InputForm, \"Y5RvzzUE+BmNaBQ/fgiXjGb+q5I=\", false, function () {\n  return [useDispatch, useForm];\n});\n_c = InputForm;\nexport default InputForm;\nvar _c;\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"names":["useForm","Box","Button","Modal","useReducer","useState","useSelector","useDispatch","setTitle","addField","addForm","BasicDetails","Options","jsxDEV","_jsxDEV","Actions","SetDropdowns","SetTextFields","SetTextAreas","SetSwitches","SetRadios","RESET","initialState","dropdownCount","textFieldCount","textAreaCount","switchCount","radioCount","reducer","state","action","type","payload","InputForm","_s","openForm","setOpenForm","dispatch","dropdownDetails","setDropdownDetails","textFieldDetails","setTextFieldDetails","textAreaDetails","setTextAreaDetails","switchDetails","setSwitchDetails","radioDetails","setRadioDetails","globalDispatch","register","handleSubmit","reset","onSubmit","data","formTitle","fieldData","count","Number","dropdowns","textFields","textAreas","switches","radios","forEach","field","formData","title","fields","handleCountInput","inputType","value","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","open","className","placeholder","onChange","e","target","Array","from","length","map","_","index","_c","$RefreshReg$"],"sources":["/Users/yashsoni/Documents/web-apps/js codes/Machine-coding-UI/euler-motors/src/components/InputForm/InputForm.jsx"],"sourcesContent":["import { useForm } from 'react-hook-form'\nimport { Box, Button, Modal } from '@mui/material'\nimport { useReducer, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setTitle, addField, addForm } from '../redux/slices/formSlice'\nimport './styles.css'\nimport BasicDetails from './BasicDetails'\nimport Options from './Options'\n\nexport const Actions = {\n\tSetDropdowns: 'setDropdowns',\n\tSetTextFields: 'setTextFields',\n\tSetTextAreas: 'setTextAreas',\n\tSetSwitches: 'setSwitches',\n\tSetRadios: 'setRadios',\n\tRESET: 'reset'\n}\n\nconst initialState = { \n  dropdownCount: '', \n  textFieldCount: '', \n  textAreaCount: '', \n  switchCount: '', \n  radioCount: '', \n}\n\nfunction reducer(state, action) {\n  switch(action.type) {\n    case Actions.SetDropdowns:\n      return {...state, dropdownCount: action.payload}\n    \n    case Actions.SetTextFields:\n      return {...state, textFieldCount: action.payload}\n\n    case Actions.SetTextAreas:\n      return {...state, textAreaCount: action.payload}\n    \n    case Actions.SetSwitches:\n      return {...state, switchCount: action.payload}\n    \n    case Actions.SetRadios:\n      return {...state, radioCount: action.payload}\n\n    case Actions.RESET:\n      return initialState\n    \n    default:\n      break\n  }\n}\n\nconst InputForm = () => {\n  const [ openForm, setOpenForm ] = useState(false)\n  const [ state, dispatch ] = useReducer(reducer, initialState)\n\n  const [dropdownDetails, setDropdownDetails] = useState([])\n  const [textFieldDetails, setTextFieldDetails] = useState([])\n  const [textAreaDetails, setTextAreaDetails] = useState([])\n  const [switchDetails, setSwitchDetails] = useState([])\n  const [radioDetails, setRadioDetails] = useState([])\n\n  const globalDispatch = useDispatch()\n\n  const { register, handleSubmit, reset } = useForm()\n\n  const onSubmit= (data) => {\n    if(data && typeof data==='object') {\n      globalDispatch(setTitle(data.formTitle))\n      const fieldData = [\n        {type: 'dropdown', count: Number(data.dropdowns), data: [] },\n        {type: 'textField', count: Number(data.textFields), data: [] },\n        {type: 'textArea', count: Number(data.textAreas), data: [] },\n        {type: 'switch', count: Number(data.switches), data: [] },\n        {type: 'radio', count: Number(data.radios), data: [] }\n      ]\n      fieldData.forEach(field => globalDispatch(addField(field)))\n      const formData = {\n        title: data.formTitle,\n        fields: fieldData\n      }\n      globalDispatch(addForm(formData))\n    }\n    setOpenForm(false)\n    reset()\n    dispatch({type: Actions.RESET})\n  }\n\n  const handleCountInput = (inputType, value) => {\n    switch(inputType) {\n      case 'dropdown': dispatch({type: Actions.SetDropdowns, payload: value})\n      break\n      case 'textField': dispatch({type: Actions.SetTextFields, payload: value})\n      break\n      case 'textArea': dispatch({type: Actions.SetTextAreas, payload: value})\n      break\n      case 'switch': dispatch({type: Actions.SetSwitches, payload: value})\n      break\n      case 'radio': dispatch({type: Actions.SetRadios, payload: value})\n      break\n      \n    }\n  }\n\n  return (\n    <div>\n      Input Form: \n      <Button onClick={() => setOpenForm(true)}>Create Form</Button>\n      <Modal open={openForm}>\n        <Box className='inputForm'>\n          <div className='inputFields'>\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <label>Form Title: </label>\n              <input \n                type='text' \n                {...register(\"formTitle\")} \n                placeholder='Enter Your Form Title'\n              />\n\n              <p>Number of Input Fields Required for your Form:</p>\n              <div className='individualInput'>\n                <label>Dropdowns:</label>\n                <input \n                  type='number' \n                  // value={state.dropdownCount} onChange={updateDropdownCount} placeholder='0' \n                  className='inputBox'\n                  {...register(\"dropdowns\")}\n                  placeholder='0'\n                  onChange={e=>handleCountInput('dropdown', e.target.value)}\n                />\n                {state.dropdownCount > 0 && \n                  Array.from({ length: state.dropdownCount}).map((_, index) => (\n                    <div>\n                      <BasicDetails dropdownDetails={dropdownDetails} setDropdownDetails={setDropdownDetails} />\n                      {/* <Options /> */}\n                    </div>\n                  ))\n                }\n              </div>\n\n              <div className='individualInput'>\n                <label>TextFields:</label>\n                <input \n                  type='number' \n                  // value={state.textFieldCount} onChange={updateTextFieldCount} placeholder='0' \n                  className='inputBox'\n                  {...register(\"textFields\")}\n                  placeholder='0'\n                  onChange={e=>handleCountInput('textField', e.target.value)}\n                />\n                {state.textFieldCount > 0 && \n                 Array.from({ length: state.textFieldCount}).map((_, index) => (\n                  <BasicDetails textFieldDetails={textFieldDetails} setTextFieldDetails={setTextFieldDetails} />\n                ))\n                }\n              </div>\n\n              <div className='individualInput'>\n                <label>TextAreas:</label>\n                <input \n                  type='number' \n                  // value={state.textAreaCount} onChange={updateTextAreaCount} placeholder='0' \n                  className='inputBox'\n                  {...register(\"textAreas\")}\n                  placeholder='0'\n                  onChange={e=>handleCountInput('textArea', e.target.value)}\n                />\n                {state.textAreaCount > 0 && \n                  Array.from({ length: state.textAreaCount}).map((_, index) => (\n                    <BasicDetails />\n                  ))\n                }\n              </div>\n\n              <div className='individualInput'>\n                <label>Switches:</label>\n                <input \n                  type='number' \n                  // value={state.switchCount} onChange={updateSwitchCount} placeholder='0' \n                  className='inputBox'\n                  {...register(\"switches\")}\n                  placeholder='0'\n                  onChange={e=>handleCountInput('switch', e.target.value)}\n                />\n                {state.switchCount > 0 &&\n                Array.from({ length: state.switchCount}).map((_, index) => (\n                  <BasicDetails />\n                ))\n                }\n              </div>\n\n              <div className='individualInput'>\n                <label>Radio Buttons:</label>\n                <input \n                  type='number' \n                  // value={state.radioCount} onChange={updateRadioCount} placeholder='0' \n                  className='inputBox'\n                  {...register(\"radios\")}\n                  placeholder='0'\n                  onChange={e=>handleCountInput('radio', e.target.value)}\n                />\n                {state.radioCount > 0 && \n                  Array.from({ length: state.radioCount}).map((_, index) => (\n                    <BasicDetails />\n                  ))\n                }\n              </div>\n\n              <input type='submit' className='submitButton' />\n            </form>\n          </div>\n          <button onClick={() => setOpenForm(false)} className='closeButton'>X</button>\n        </Box>\n      </Modal>\n    </div>\n  )\n}\n\nexport default InputForm"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}