{"ast":null,"code":"var _jsxFileName = \"/Users/yashsoni/Documents/web-apps/js codes/Machine-coding-UI/euler-motors/src/components/DisplayForm/DisplayForm.jsx\";\nimport { Box, Modal } from '@mui/material';\nimport DropDownComp from './DropDownComp';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DisplayForm = ({\n  displayForm,\n  setDisplayForm,\n  formDetails\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      open: displayForm,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: \"displayForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formFields\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"formTitle\",\n              children: formDetails.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 13,\n              columnNumber: 15\n            }, this), formDetails.fields.map(inputField => {\n              if (inputField.type !== 'dropdown' || inputField.type != 'radio') {\n                return Array.from({\n                  length: inputField.count\n                }).map((_, index) => inputField.data.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"formField\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [item.fieldName, \": \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 21,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: inputField.type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 22,\n                    columnNumber: 25\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 20,\n                  columnNumber: 25\n                }, this)));\n              } else {\n                return Array.from({\n                  length: inputField.count\n                }).map((_, index) => /*#__PURE__*/_jsxDEV(DropDownComp, {\n                  dropdownObj: inputField.data[index]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 30,\n                  columnNumber: 23\n                }, this));\n              }\n            }), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"submit\",\n              className: \"formField\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setDisplayForm(false),\n          className: \"closeButton\",\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = DisplayForm;\nexport default DisplayForm;\nvar _c;\n$RefreshReg$(_c, \"DisplayForm\");","map":{"version":3,"names":["Box","Modal","DropDownComp","jsxDEV","_jsxDEV","Fragment","_Fragment","DisplayForm","displayForm","setDisplayForm","formDetails","children","open","className","title","fileName","_jsxFileName","lineNumber","columnNumber","fields","map","inputField","type","Array","from","length","count","_","index","data","item","fieldName","dropdownObj","onClick","_c","$RefreshReg$"],"sources":["/Users/yashsoni/Documents/web-apps/js codes/Machine-coding-UI/euler-motors/src/components/DisplayForm/DisplayForm.jsx"],"sourcesContent":["import { Box, Modal } from '@mui/material'\nimport DropDownComp from './DropDownComp'\nimport './styles.css'\n\nconst DisplayForm = ({ displayForm, setDisplayForm, formDetails}) => {\n\n  return (\n    <>\n      <Modal open={displayForm} >\n        <Box className='displayForm'>\n          <div className='formFields'>\n            <form>\n              <h3 className='formTitle'>{formDetails.title}</h3>\n\n              {formDetails.fields.map(inputField => {\n                if(inputField.type!=='dropdown' || inputField.type != 'radio') {\n                  return (\n                    Array.from({ length: inputField.count }).map((_, index) => (\n                      inputField.data.map(item => (\n                        <div key={index} className='formField'>\n                        <label>{item.fieldName}: </label>\n                        <input type={inputField.type} />\n                      </div>\n                      ))\n                    ))\n                  )\n                } else {\n                  return (\n                    Array.from({ length: inputField.count }).map((_, index) => (\n                      <DropDownComp dropdownObj = {inputField.data[index]} />\n                    )))\n                }\n              })}\n              <input type='submit' className='formField' />\n            </form>\n          </div>\n          <button onClick={() => setDisplayForm(false)} className='closeButton'>X</button>\n        </Box>\n      </Modal>\n    </>\n  )\n}\n\nexport default DisplayForm"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}